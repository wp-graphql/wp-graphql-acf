<?php

/**
 * Class LocationRulesTest
 *
 * These tests are intended to test ACF Field groups that are assigned locations
 * but not explicitly assigned "graphql_types"
 */
class LocationRulesTest extends \Codeception\TestCase\WPTestCase {

	public $group_key;
	public $post_id;
	public $test_image;
	public $tag_id;

	public function setUp(): void {

		parent::setUp(); // TODO: Change the autogenerated stub
		$this->group_key = __CLASS__;
		WPGraphQL::clear_schema();

		$this->post_id = $this->factory()->post->create( [
			'post_type'    => 'post',
			'post_status'  => 'publish',
			'post_title'   => 'Test',
			'post_content' => 'test',
		] );

		$this->tag_id = $this->factory()->term->create( [
			'taxonomy' => 'post_tag',
		] );

		$this->test_image = dirname( __FILE__, 2 ) . '/_data/images/test.png';

	}

	public function tearDown(): void {
		wp_delete_post( $this->post_id, true );
		WPGraphQL::clear_schema();
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function register_acf_field_group( $config = [] ) {

		$defaults = [
			'key'                   => $this->group_key,
			'title'                 => 'Test Fields',
			'fields'                => [],
			'menu_order'            => 0,
			'position'              => 'normal',
			'style'                 => 'default',
			'label_placement'       => 'top',
			'instruction_placement' => 'label',
			'hide_on_screen'        => '',
			'active'                => true,
			'description'           => '',
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'testFields',
		];

		$field_group = array_merge( $defaults, $config );

		codecept_debug( $field_group );

		acf_add_local_field_group( $field_group );


	}

	public function register_acf_field( $config = [] ) {

		$defaults = [
			'parent'            => $this->group_key,
			'key'               => 'field_5d7812fd123',
			'label'             => 'Text',
			'name'              => 'text',
			'type'              => 'text',
			'instructions'      => '',
			'required'          => 0,
			'conditional_logic' => 0,
			'wrapper'           => array(
				'width' => '',
				'class' => '',
				'id'    => '',
			),
			'show_in_graphql'   => 1,
			'default_value'     => '',
			'placeholder'       => '',
			'prepend'           => '',
			'append'            => '',
			'maxlength'         => '',
		];

		acf_add_local_field( array_merge( $defaults, $config ) );
	}

	public function testFieldGroupAssignedToPostTypeWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'location'              => [
				[
					[
						'param'    => 'post_type',
						'operator' => '==',
						'value'    => 'post',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'postFieldsTest',
		]);


		$query = '
		{
		  posts {
		    nodes {
		      id
		      title
		      postFieldsTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );

		acf_remove_local_field_group( $this->group_key );

	}

	public function testFieldGroupAssignedToTagWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'tagFieldsTest',
			'location'              => [
				[
					[
						'param'    => 'taxonomy',
						'operator' => '==',
						'value'    => 'post_tag',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'tagFieldsTest',
		]);


		$query = '
		{
		  tags {
		    nodes {
		      id
		      name
		      tagFieldsTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'tagFieldsTest' );

	}

	public function testFieldGroupAssignedToCategoryWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'categoryFieldTest',
			'location'              => [
				[
					[
						'param'    => 'taxonomy',
						'operator' => '==',
						'value'    => 'category',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'categoryFieldTest',
		]);


		$query = '
		{
		  categories {
		    nodes {
		      id
		      name
		      categoryFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'tagFieldsTest' );

	}

	public function testFieldGroupAssignedToCommentsWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'commentFieldTest',
			'location'              => [
				[
					[
						'param'    => 'comment',
						'operator' => '==',
						'value'    => 'all',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'commentFieldTest',
		]);


		$query = '
		{
		  comments {
		    nodes {
		      id
		      commentFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'commentFieldTest' );

	}

	public function testFieldGroupAssignedToMenusWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'menuFieldTest',
			'location'              => [
				[
					[
						'param'    => 'nav_menu',
						'operator' => '==',
						'value'    => 'all',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'menuFieldTest',
		]);


		$query = '
		{
		  menus {
		    nodes {
		      id
		      menuFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

	}

	public function testFieldGroupAssignedToMenuItemsWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'menuItemFieldTest',
			'location'              => [
				[
					[
						'param'    => 'nav_menu_item',
						'operator' => '==',
						'value'    => 'all',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'menuItemFieldTest',
		]);


		$query = '
		{
		  menuItems {
		    nodes {
		      id
		      menuItemFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual, 'If this fails, see https://github.com/wp-graphql/wp-graphql/issues/1844' );

		acf_remove_local_field_group( 'menuItemFieldTest' );

	}

	public function testFieldGroupAssignedToMediaWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'mediaItemFieldTest',
			'location'              => [
				[
					[
						'param'    => 'attachment',
						'operator' => '==',
						'value'    => 'all',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'mediaItemFieldTest',
		]);


		$query = '
		{
		  mediaItems {
		    nodes {
		      id
		      mediaItemFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'mediaItemFieldTest' );

	}

	public function testFieldGroupAssignedToIndividualPostWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'singlePostFieldTest',
			'location'              => [
				[
					[
						'param'    => 'post',
						'operator' => '==',
						'value'    => $this->post_id,
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'singlePostFieldTest',
		]);


		$query = '
		{
		  posts {
		    nodes {
		      id
		      singlePostFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$query = '
		{
		  comments {
		    nodes {
		      id
		      singlePostFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'singlePostFieldTest' );

	}

	public function testFieldGroupAssignedToUserEditWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'userEditFieldTest',
			'location'              => [
				[
					[
						'param'    => 'user_form',
						'operator' => '==',
						'value'    => 'edit',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'userEditFieldTest',
		]);


		$query = '
		{
		  users {
		    nodes {
		      id
		      userEditFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$query = '
		{
		  comments {
		    nodes {
		      id
		      userEditFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'userEditFieldTest' );

	}

	public function testFieldGroupAssignedToUserRegisterWithoutGraphqlTypesFieldShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'userRegisterFieldTest',
			'location'              => [
				[
					[
						'param'    => 'user_form',
						'operator' => '==',
						'value'    => 'register',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'userRegisterFieldTest',
		]);


		$query = '
		{
		  users {
		    nodes {
		      id
		      userRegisterFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$query = '
		{
		  comments {
		    nodes {
		      id
		      userRegisterFieldTest {
		        fieldGroupName
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayHasKey( 'errors', $actual );

		acf_remove_local_field_group( 'userRegisterFieldTest' );

	}

	public function testFieldGroupAssignedToAcfOptionsPageShowsInSchema() {

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'settingsFieldsTest',
			'location'              => [
				[
					[
						'param'    => 'options_page',
						'operator' => '==',
						'value'    => 'theme-general-settings',
					],
				],
				[
					[
						'param'    => 'options_page',
						'operator' => '==',
						'value'    => 'theme-footer-settings',
					],
				],
			],
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'settingsFieldsTest',
		]);

		$this->register_acf_field([
			'parent' => 'settingsFieldsTest',
			'name' => 'text',
			'key' => 'settingsFieldTextField'
		]);

		$expected = 'this is a test value for the settings field';

		update_field( 'settingsFieldTextField', $expected, 'option' );

		acf_add_options_page(array(
			'page_title' 	=> 'Theme General Settings',
			'menu_title'	=> 'Theme Settings',
			'menu_slug' 	=> 'theme-general-settings',
			'capability'	=> 'edit_posts',
			'redirect'		=> false,
			'show_in_graphql' => true,
			'graphql_field_name' => 'ThemeGeneralSettings',
		));

		acf_add_options_sub_page(array(
			'page_title' 	=> 'Theme Header Settings',
			'menu_title'	=> 'Header',
			'parent_slug'	=> 'theme-general-settings',
			'menu_slug' 	=> 'theme-header-settings',
			'show_in_graphql' => true,
			'graphql_field_name' => 'ThemeHeaderSettings',
		));

		acf_add_options_sub_page(array(
			'page_title' 	=> 'Theme Footer Settings',
			'menu_title'	=> 'Footer',
			'parent_slug'	=> 'theme-general-settings',
			'menu_slug' 	=> 'theme-footer-settings',
			'show_in_graphql' => true,
			'graphql_field_name' => 'ThemeFooterSettings',
		));


		$query = '
		{
		  themeGeneralSettings {
		    settingsFieldsTest {
		      __typename
		      text
		    }
		  }
		  themeFooterSettings {
		    settingsFieldsTest {
		      __typename
		      text
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertSame( $expected, $actual['data']['themeGeneralSettings']['settingsFieldsTest']['text'] );

		acf_remove_local_field_group( 'settingsFieldsTest' );

	}

	/**
	 * @see: https://github.com/wp-graphql/wp-graphql-acf/issues/251
	 * @throws Exception
	 */
	public function testOnlyFieldGroupsSetToShowInGraphqlAreInTheSchema() {

		$post_id = $this->factory()->post->create([ 'post_status' => 'publish' ]);

		/**
		 * Register a field group to a specific post type
		 */
		$this->register_acf_field_group([
			'key' => 'doNotShowInGraphQL',
			'location'              => [
				[
					[
						'param'    => 'post_type',
						'operator' => '==',
						'value'    => 'post',
					],
				],
			],
			'show_in_graphql'       => false,
			'graphql_field_name'    => 'doNotShowInGraphQL',
			'graphql_types'         => [ 'Post' ]
		]);

		$this->register_acf_field_group([
			'key' => 'showInGraphqlTest',
			'location'              => [
				[
					[
						'param'    => 'post_type',
						'operator' => '==',
						'value'    => 'post',
					],
				],
			],
			'show_in_graphql'       => true,
			'graphql_field_name'    => 'showInGraphqlTest',
			'graphql_types'         => [ 'Post' ]
		]);

		$query = '
		query GetPost($id:ID!) {
		  post(id:$id idType:DATABASE_ID) {
		    databaseId
		    doNotShowInGraphQL {
		      __typename
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'id' => $post_id,
			],
		]);

		codecept_debug( $actual );

		// doNotShowInGraphQL should not be in the Schema, so this should be an error
		$this->assertArrayHasKey( 'errors', $actual );

		$query = '
		query GetPost($id:ID!) {
		  post(id:$id idType:DATABASE_ID) {
		    databaseId
		    showInGraphqlTest {
		      __typename
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'id' => $post_id,
			],
		]);

		codecept_debug( $actual );

		// showInGraphqlTest should be queryable against the Post type in the Schema
		$this->assertSame( $post_id, $actual['data']['post']['databaseId'] );
		$this->assertSame( 'ShowInGraphqlTest', $actual['data']['post']['showInGraphqlTest']['__typename'] );

		acf_remove_local_field_group( 'doNotShowInGraphQL' );
		acf_remove_local_field_group( 'showInGraphqlTest' );

	}

}
