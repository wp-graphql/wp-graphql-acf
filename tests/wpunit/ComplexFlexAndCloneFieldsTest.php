<?php
class ComplexFlexAndCloneFieldsTest extends \Codeception\TestCase\WPTestCase {

	public $group_key;
	public $post_id;
	public $page_id;
	public $test_image;

	public $import_file = '/complex-field-group/acf-export.json';
	public $imported_group_ids = [];

	public function setUp(): void {

		parent::setUp(); // TODO: Change the autogenerated stub

		$this->import_field_groups( $this->import_file );

		$this->group_key = __CLASS__;
		WPGraphQL::clear_schema();

		$this->post_id = $this->factory()->post->create( [
			'post_type'    => 'post',
			'post_status'  => 'publish',
			'post_title'   => 'Test',
			'post_content' => 'test',
		] );

		$this->page_id = $this->factory()->post->create( [
			'post_type'    => 'page',
			'post_status'  => 'publish',
			'post_title'   => 'Test Page',
			'post_content' => 'test Page Content...',
		] );

		$this->test_image = dirname( __FILE__, 2 ) . '/_data/images/test.png';


	}

	public function tearDown(): void {

		$this->remove_imported_acf_field_groups();

		WPGraphQL::clear_schema();
		wp_delete_post( $this->post_id, true );
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function remove_imported_acf_field_groups() {

		if ( ! empty( $this->imported_group_ids ) ) {
			foreach ( $this->imported_group_ids as $id ) {
				acf_delete_field_group( $id );
			}
		}
	}

	public function import_field_groups( string $import_file ) {

		$file =  dirname( __FILE__, 2 ) . '/_data/field-group-exports/' . $import_file ;

		$json = file_get_contents( $file );
		$json = json_decode(    $json, true );

		if( ! $json || !is_array($json) ) {
			codecept_debug( 'Cannot import ' . $file );
		}

		// Ensure $json is an array of groups.
		if( isset($json['key']) ) {
			$json = array( $json );
		}

		// Loop over json
		foreach( $json as $field_group ) {

			// Import field group.
			$imported_field_group = acf_import_field_group( $field_group );

			// append message
			$this->imported_group_ids[] = $imported_field_group['ID'];
		}

		// Count number of imported field groups.
		$total = count($this->imported_group_ids);

		// Generate text.
		$text = sprintf( _n( 'Imported 1 field group', 'Imported %s field groups', $total, 'acf' ), $total );
		codecept_debug( $text );

	}

	public function deregister_acf_field_group() {
		acf_delete_field_group( $this->group_key );
	}

	/**
	 * @throws Exception
	 */
	public function testBasicQuery() {
		$query  = '{ posts { nodes { id } } }';
		$actual = graphql( [ 'query' => $query ] );
		$this->assertArrayNotHasKey( 'errors', $actual );
	}

	public function testPageBuilderQuery() {

		$hero_fragment = '
		fragment Hero on With_AcfHero_Fields {
		  heroImage {
		    node {
		      databaseId
		    }
		  }
		  heroHeadline
		  heroSubHeadline
		  hasCta
		  ctaType
		  link {
		    url
		  }
		  heroVideo
		}
		';

		$shade_fragment = '
		fragment Shade on With_AcfBackgroundShade_Fields {
		  shade
		}
		';

		$margins_fragment = '
		fragment Margins on With_AcfVerticalSpacing_Fields {
			margins {
				marginTop
				marginBottom
			}
		}
		';

		$query = '
		query GetPage( $id:ID! ) {
		  page(id: $id idType: DATABASE_ID) {
		    id
		    title
		    acfPageBuilder {
		      componentNames: components {
		        __typename
		      }
		      components {
		        __typename
		        ...Hero
		        ...Shade
		        ...Margins
		      }
		    }
		  }
		}
		' . $hero_fragment . '
		' . $shade_fragment . '
		' . $margins_fragment . '
		';

//
//		$margins_fragment = '
//		fragment Margins on With_AcfVerticalSpacing_Fields {
//			margins {
//			  marginTop
//			  marginBottom
//			}
//		}
//		';
//
//		$content_component_fragment = '
//		fragment Content on With_AcfContentComponent_Fields {
//			headline
//			content
//			listColumns
//			sectionLink {
//			  url
//			}
//		}
//		';
//
//		$content_section_fragment = '
//		fragment ContentSection on AcfPageBuilderContentSection {
//			shade
//			...Margins
//			...Content
//		}
//		';
//
//		$page_builder_fragment = '
//		fragment PageBuilder on With_AcfPageBuilder {
//		  pageBuilder {
//		    components {
//		      ...Hero
//		      ...ContentSection
//		    }
//		  }
//		}
//		';
//
//		$query = '
//		{
//			page( id: $id idType: DATABASE_ID ) {
//			  id
//			  databaseId
//			  ...PageBuilder
//			}
//		}
//		'. $page_builder_fragment .'
//		'. $content_section_fragment .'
//		'. $content_component_fragment .'
//		'. $margins_fragment .'
//		'. $hero_fragment .'
//		';
//
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'id' => $this->page_id,
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

	}

}
