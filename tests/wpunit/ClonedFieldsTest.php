<?php
class ClonedFieldsTest extends \Codeception\TestCase\WPTestCase {

	public $group_key;
	public $post_id;
	public $test_image;

	public function setUp(): void {


		parent::setUp(); // TODO: Change the autogenerated stub

		$this->group_key = __CLASS__;
		WPGraphQL::clear_schema();
		$this->register_acf_field_group();

		$this->post_id = $this->factory()->post->create( [
			'post_type'    => 'post',
			'post_status'  => 'publish',
			'post_title'   => 'Test',
			'post_content' => 'test',
		] );

		$this->test_image = dirname( __FILE__, 2 ) . '/_data/images/test.png';


	}

	public function tearDown(): void {

		$this->deregister_acf_field_group();
		WPGraphQL::clear_schema();
		wp_delete_post( $this->post_id, true );
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function deregister_acf_field_group() {
		acf_remove_local_field_group( $this->group_key );
	}

	public function register_acf_field_group( $config = [] ) {

		$defaults = [
			'key'                   => $this->group_key,
			'title'                 => 'Cloned Field Group',
			'fields'                => [
				[
					'key' => 'field_60abe262d31cd',
					'label' => 'text',
					'name' => 'text',
					'type' => 'text',
					'instructions' => '',
					'required' => 0,
					'conditional_logic' => 0,
					'wrapper' => [
						'width' => '',
						'class' => '',
						'id' => '',
					],
					'show_in_graphql' => 1,
					'default_value' => '',
					'placeholder' => '',
					'prepend' => '',
					'append' => '',
					'maxlength' => '',
				],
				[
					'key' => 'field_60abe267d31ce',
					'label' => 'Image',
					'name' => 'image',
					'type' => 'image',
					'instructions' => '',
					'required' => 0,
					'conditional_logic' => 0,
					'wrapper' => [
						'width' => '',
						'class' => '',
						'id' => '',
					],
					'show_in_graphql' => 1,
					'return_format' => 'array',
					'preview_size' => 'medium',
					'library' => 'all',
					'min_width' => '',
					'min_height' => '',
					'min_size' => '',
					'max_width' => '',
					'max_height' => '',
					'max_size' => '',
					'mime_types' => '',
				],
				[
					'key' => 'field_60abe26ed31cf',
					'label' => 'color',
					'name' => 'color',
					'type' => 'color_picker',
					'instructions' => '',
					'required' => 0,
					'conditional_logic' => 0,
					'wrapper' => [
						'width' => '',
						'class' => '',
						'id' => '',
					],
					'show_in_graphql' => 1,
					'default_value' => '',
				],
			],
			'location'              => [
				[
					[
						'param'    => 'post_type',
						'operator' => '==',
						'value'    => 'post',
					],
				],
			],
			'menu_order'            => 0,
			'position'              => 'normal',
			'style'                 => 'default',
			'label_placement'       => 'top',
			'instruction_placement' => 'label',
			'hide_on_screen'        => '',
			'active'                => false,
			'description'           => '',
			'show_in_graphql'       => 1,
			'graphql_field_name'    => 'cloneGroup',
			'graphql_types'         => '',
			'map_graphql_types_from_location_rules' => false,
		];

		acf_add_local_field_group( array_merge( $defaults, $config ) );

	}

	public function register_acf_field( $config = [] ) {

		$defaults = [
			'parent'            => $this->group_key,
			'key'               => 'field_5d7812fd000a4',
			'label'             => 'Text',
			'name'              => 'text',
			'type'              => 'text',
			'instructions'      => '',
			'required'          => 0,
			'conditional_logic' => 0,
			'wrapper'           => array(
				'width' => '',
				'class' => '',
				'id'    => '',
			),
			'show_in_graphql'   => 1,
			'default_value'     => '',
			'placeholder'       => '',
			'prepend'           => '',
			'append'            => '',
			'maxlength'         => '',
		];

		acf_add_local_field( array_merge( $defaults, $config ) );
	}

	/**
	 * @throws Exception
	 */
	public function testBasicQuery() {
		$query  = '{ posts { nodes { id } } }';
		$actual = graphql( [ 'query' => $query ] );
		$this->assertArrayNotHasKey( 'errors', $actual );
	}

	public function test_cloned_field_group_exists_in_schema() {

		$this->register_acf_field([
			'name'              => 'text_field_clone_test',
			'type'              => 'text',
		]);

		$query = '
		query getType( $name: String! ){
		  __type(name: $name) {
		    name
		    kind
		    fields {
		      name
		      type {
		        kind
		      }
		    }
		  }
		}
		';

		$name = 'CloneGroup';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'name' => $name
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertSame( $name, $actual['data']['__type']['name'] );

	}

	public function testFieldGroupWithClonedFieldsIsQueryable() {

		// Register a field to the clone field group
		$this->register_acf_field([
			'name'              => 'text_field_clone_test',
			'type'              => 'text',
		]);

		// Register a new field group, which sets it's fields
		// as a clone of the clone field group
		$this->register_acf_field_group([
			'key' => 'group_60abfd20a6b4e',
			'title' => 'Post Group With Clone Fields',
			'fields' => array(
				array(
					'key' => 'field_60abfd2d03112',
					'label' => 'clone',
					'name' => 'clone',
					'type' => 'clone',
					'instructions' => '',
					'required' => 0,
					'conditional_logic' => 0,
					'wrapper' => array(
						'width' => '',
						'class' => '',
						'id' => '',
					),
					'show_in_graphql' => 1,
					'clone' => array(
						0 => $this->group_key,
					),
					'display' => 'seamless',
					'layout' => 'block',
					'prefix_label' => 0,
					'prefix_name' => 0,
				),
			),
			'location' => array(
				array(
					array(
						'param' => 'post_type',
						'operator' => '==',
						'value' => 'post',
					),
				),
			),
			'menu_order' => 0,
			'position' => 'normal',
			'style' => 'default',
			'label_placement' => 'top',
			'instruction_placement' => 'label',
			'hide_on_screen' => '',
			'active' => true,
			'description' => '',
			'show_in_graphql' => true,
			'graphql_field_name' => 'postGroupWithCloneFields',
			'map_graphql_types_from_location_rules' => 0,
			'graphql_types' => '',
		]);

		// Query to make sure the field we registered to the clone field group
		// shows in the Schema
		$query = '
		query getType( $name: String! ){
		  __type(name: $name) {
		    name
		    kind
		    fields {
		      name
		      type {
		        kind
		      }
		    }
		  }
		}
		';

		$name = 'PostGroupWithCloneFields';

		$actual = graphql([
			'query' => $query,
			'variables' => [
				'name' => $name
			]
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertSame( $name, $actual['data']['__type']['name'] );
		$field_names = wp_list_pluck( $actual['data']['__type']['fields'], 'name' );

		// Test to make sure the field we just registered exists in the Schema on the `PostGroupWithCloneFields` type
		$this->assertTrue( in_array( 'textFieldCloneTest', $field_names, true ) );

		$query = '
		query getPostById( $id: ID! ) {
			post(id:$id idType:DATABASE_ID) {
				databaseId
				postGroupWithCloneFields {
				   textFieldCloneTest
				}
			}
		}
		';

		// Update the ACF field value
		$value = 'test value';
		update_field( 'text_field_clone_test', $value, $this->post_id );

		// Query the field group that has cloned fields assigned to it
		$actual = graphql([
			'query' => $query,
			'variables' => [
				'id' => $this->post_id,
			]
		]);

		codecept_debug( $actual );

		delete_field( 'text_field_clone_test', $this->post_id );

		// Assert that the value of the clone field is returned
		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertSame( $value, $actual['data']['post']['postGroupWithCloneFields']['textFieldCloneTest'] );

		acf_remove_local_field_group( 'group_60abfd20a6b4e' );
	}

}
